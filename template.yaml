AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: A serverless application that allows scholarship providers to create and manage their scholarships.

# Anything created in this file is directly from AWS documentation.
# The docs are available at https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/
# Note that this primarily uses the AWS::Serverless::Function and AWS::Serverless::Api, which would be easily
# findable under "How to use SAM -> The AWS SAM project -> Resources and Properties"

Globals:
  Function:
    Timeout: 3

Resources:
  # Define a new resource
  providerLogin:
    # Tells SAM to define a new Lambda function
    Type: AWS::Serverless::Function
    Properties:
      Description: A function to login a scholarship provider.
      # The path to the folder containing this function's code
      CodeUri: src/lambdaFunctions/providerLogin
      # The address to the entry point - is in <file>.<function> format.
      Handler: index.handler
      # Everything should be using a nodejs runtime
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Events:
        # Simply a name - doesn't actually mean this is a POST request only.
        PostRequest:
          # Tell SAM to link this to an API
          Type: Api
          Properties:
            # Link the API here
            RestApiId: !Ref ScholarshipApi
            # Tell SAM what path to use in this API.
            Path: /providers/login
            # Requires POST request to work
            Method: post
            # This overrides the default authorizer - be careful with this.
            # Should only be used on functions that require absolutely no authorization.
            Auth:
              Authorizer: NONE
        OptionsRequest:
          Type: Api
          Properties:
            RestApiId: !Ref ScholarshipApi
            Path: /providers/login
            Method: options
            Auth:
              Authorizer: NONE
      # This function shouldn't be directly runnable by anyone except those that
      # have access to the AWS console. Others will still be able to access the
      # API to run it though.
      FunctionUrlConfig:
        AuthType: AWS_IAM
      Policies:
        # Give CRUD access to the DynamoDB table
        - DynamoDBReadPolicy:
            TableName: scholarship-providers
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:providerjwt-bTmFJk"
    # Set up the build method for the function.
    # Since we use typescript with esbuild, we'll set that up here.
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        # Sourcemap: true
        # Suppresses errors about these packages not existing during the build process.
        External:
          - "@aws-sdk/client-dynamodb"
          - "@aws-sdk/client-secrets-manager"
        EntryPoints:
          - index.ts
  providerRegistration:
    Type: AWS::Serverless::Function
    Properties:
      Description: Handles registration of new scholarship provider accounts.
      CodeUri: src/lambdaFunctions/providerRegistration
      Handler: index.handler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Events:
        PostRequest:
          Type: Api
          Properties:
            RestApiId: !Ref ScholarshipApi
            Path: /providers/registration
            Method: post
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBCrudPolicy:
            TableName: scholarship-providers
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:providerjwt-bTmFJk"
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        External:
          - "@aws-sdk/client-dynamodb"
          - "@aws-sdk/client-secrets-manager"
        EntryPoints:
          - index.ts
  readScholarshipRequirements:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdaFunctions/readScholarshipRequirements
      Handler: index.handler
      Runtime: nodejs20.x
      Events:
        GetRequest:
          Type: Api
          Properties:
            RestApiId: !Ref ScholarshipApi
            Path: /providers/requirements
            Method: get
      Policies:
        - DynamoDBReadPolicy:
            TableName: scholarship-info
      FunctionUrlConfig:
        AuthType: AWS_IAM
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        # Sourcemap: true
        External:
          - "@aws-sdk/client-dynamodb"
        EntryPoints:
          - index.ts
  updateScholarshipRequirements:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdaFunctions/updateScholarshipRequirements
      Handler: index.handler
      Runtime: nodejs20.x
      Events:
        PostRequest:
          Type: Api
          Properties:
            RestApiId: !Ref ScholarshipApi
            Path: /providers/requirements
            Method: post
      Policies:
        - DynamoDBCrudPolicy:
            TableName: scholarship-info
      FunctionUrlConfig:
        AuthType: AWS_IAM
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        # Sourcemap: true
        External:
          - "@aws-sdk/client-dynamodb"
        EntryPoints:
          - index.ts
  updateScholarshipEligibility:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdaFunctions/updateScholarshipEligibility
      Handler: index.handler
      Runtime: nodejs20.x
      Events:
        PostRequest:
          Type: Api
          Properties:
            RestApiId: !Ref ScholarshipApi
            Path: /providers/eligibility
            Method: post
      Policies:
        - DynamoDBCrudPolicy:
            TableName: scholarship-info
      FunctionUrlConfig:
        AuthType: AWS_IAM
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        # Sourcemap: true
        External:
          - "@aws-sdk/client-dynamodb"
        EntryPoints:
          - index.ts
  updateScholarshipContactInfo:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdaFunctions/updateScholarshipContactInfo
      Handler: index.handler
      Runtime: nodejs20.x
      Events:
        PostRequest:
          Type: Api
          Properties:
            RestApiId: !Ref ScholarshipApi
            Path: /providers/contact-info
            Method: post
      Policies:
        - DynamoDBCrudPolicy:
            TableName: scholarship-info
      FunctionUrlConfig:
        AuthType: AWS_IAM
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        # Sourcemap: true
        External:
          - "@aws-sdk/client-dynamodb"
        EntryPoints:
          - index.ts
  readScholarshipInfo:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdaFunctions/readScholarshipInfo
      Handler: index.handler
      Runtime: nodejs20.x
      Events:
        GetRequest:
          Type: Api
          Properties:
            RestApiId: !Ref ScholarshipApi
            Path: /providers/info
            Method: get
      Policies:
        - DynamoDBReadPolicy:
            TableName: scholarship-info
      FunctionUrlConfig:
        AuthType: AWS_IAM
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        # Sourcemap: true
        External:
          - "@aws-sdk/client-dynamodb"
        EntryPoints:
          - index.ts
  updateScholarshipInfo:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdaFunctions/updateScholarshipInfo
      Handler: index.handler
      Runtime: nodejs20.x
      Events:
        PostRequest:
          Type: Api
          Properties:
            RestApiId: !Ref ScholarshipApi
            Path: /providers/info
            Method: post
      Policies:
        - DynamoDBCrudPolicy:
            TableName: scholarship-info
      FunctionUrlConfig:
        AuthType: AWS_IAM
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        # Sourcemap: true
        External:
          - "@aws-sdk/client-dynamodb"
        EntryPoints:
          - index.ts
  readScholarshipEligibility:
    Type: AWS::Serverless::Function
    Properties:
      Description: A function to get the data for a given scholarship's eligibility.
      CodeUri: src/lambdaFunctions/readScholarshipEligibility
      Handler: index.handler
      Runtime: nodejs20.x
      Events:
        GetRequest:
          Type: Api
          Properties:
            RestApiId: !Ref ScholarshipApi
            Path: /providers/eligibility
            Method: get
      Policies:
        # Give CRUD access to the DynamoDB table
        - DynamoDBReadPolicy:
            TableName: scholarship-info
      FunctionUrlConfig:
        AuthType: AWS_IAM
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        # Sourcemap: true
        External:
          - "@aws-sdk/client-dynamodb"
        EntryPoints:
          - index.ts
  readAllScholarshipInfo:
    Type: AWS::Serverless::Function
    Properties:
      Description: Returns all information about a scholarship, sectioned by tab/form.
      CodeUri: src/lambdaFunctions/readAllScholarshipInfo
      Handler: index.handler
      Runtime: nodejs20.x
      Events:
        GetRequest:
          Type: Api
          Properties:
            RestApiId: !Ref ScholarshipApi
            Path: /providers/info/all
            Method: get
      Policies:
        - DynamoDBCrudPolicy:
            TableName: scholarship-info
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        External:
          - "@aws-sdk/client-dynamodb"
        EntryPoints:
          - index.ts
  studentUploadFafsaReport:
    Type: AWS::Serverless::Function
    Properties:
      Description: Allows a student to upload their FAFSA SAR to the application.
      CodeUri: src/lambdaFunctions/uploadFafsaReport
      Handler: index.handler
      Runtime: nodejs20.x
      Events:
        PostRequest:
          Type: Api
          Properties:
            RestApiId: !Ref ScholarshipApi
            Path: /students/fafsa
            Method: post
            Auth:
              Authorizer: studentAuthorizer
      Policies:
        - S3CrudPolicy:
            BucketName: r15-student-data
        - DynamoDBCrudPolicy:
            TableName: student-applications
      Environment:
        Variables:
          BUCKET_NAME: r15-student-data
          TABLE_NAME: student-applications
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        External:
          - "@aws-sdk/client-s3"
          - "@aws-sdk/client-dynamodb"
          - "aws-lambda"
        EntryPoints:
          - index.ts
  # Student API's
  studentUpdatePersonalInfo:
    Type: AWS::Serverless::Function
    Properties:
      Description: Allows a student to update their personal information.
      CodeUri: src/lambdaFunctions/updatePersonalInfo
      Handler: index.handler
      Runtime: nodejs20.x
      Events:
        PostRequest:
          Type: Api
          Properties:
            RestApiId: !Ref ScholarshipApi
            Path: /students/personal-info
            Method: post
            Auth:
              Authorizer: studentAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: student-applications
      Environment:
        Variables:
          TABLE_NAME: student-applications
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        External:
          - "@aws-sdk/client-dynamodb"
        EntryPoints:
          - index.ts
  studentUpdateFamilyInfo:
    Type: AWS::Serverless::Function
    Properties:
      Description: Allows a student to update their family's information.
      CodeUri: src/lambdaFunctions/updateFamilyInfo
      Handler: index.handler
      Runtime: nodejs20.x
      Events:
        PostRequest:
          Type: Api
          Properties:
            RestApiId: !Ref ScholarshipApi
            Path: /students/family-info
            Method: post
            Auth:
              Authorizer: studentAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: student-applications
      Environment:
        Variables:
          TABLE_NAME: student-applications
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        External:
          - "@aws-sdk/client-dynamodb"
        EntryPoints:
          - index.ts
  studentUpdateAcademicHonors:
    Type: AWS::Serverless::Function
    Properties:
      Description: Allows a student to update their academic honors.
      CodeUri: src/lambdaFunctions/updateAcademicHonors
      Handler: index.handler
      Runtime: nodejs20.x
      Events:
        PostRequest:
          Type: Api
          Properties:
            RestApiId: !Ref ScholarshipApi
            Path: /students/honors
            Method: post
            Auth:
              Authorizer: studentAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: student-applications
      Environment:
        Variables:
          TABLE_NAME: student-applications
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        External:
          - "@aws-sdk/client-dynamodb"
        EntryPoints:
          - index.ts
  studentUpdateAthleticParticipation:
    Type: AWS::Serverless::Function
    Properties:
      Description: Allows a student to update their sports information.
      CodeUri: src/lambdaFunctions/updateAthleticParticipation
      Handler: index.handler
      Runtime: nodejs20.x
      Events:
        PostRequest:
          Type: Api
          Properties:
            RestApiId: !Ref ScholarshipApi
            Path: /students/sports
            Method: post
            Auth:
              Authorizer: studentAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: student-applications
      Environment:
        Variables:
          TABLE_NAME: student-applications
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        External:
          - "@aws-sdk/client-dynamodb"
        EntryPoints:
          - index.ts
  studentUpdateCommunityInvolvement:
    Type: AWS::Serverless::Function
    Properties:
      Description: Allows a student to update their community involvement.
      CodeUri: src/lambdaFunctions/updateCommunityInvolvement
      Handler: index.handler
      Runtime: nodejs20.x
      Events:
        PostRequest:
          Type: Api
          Properties:
            RestApiId: !Ref ScholarshipApi
            Path: /students/community-involvement
            Method: post
            Auth:
              Authorizer: studentAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: student-applications
      Environment:
        Variables:
          TABLE_NAME: student-applications
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        External:
          - "@aws-sdk/client-dynamodb"
        EntryPoints:
          - index.ts
  studentUpdateWorkExperience:
    Type: AWS::Serverless::Function
    Properties:
      Description: Allows a student to update their work experience.
      CodeUri: src/lambdaFunctions/updateWorkExperience
      Handler: index.handler
      Runtime: nodejs20.x
      Events:
        PostRequest:
          Type: Api
          Properties:
            RestApiId: !Ref ScholarshipApi
            Path: /students/work-experience
            Method: post
            Auth:
              Authorizer: studentAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: student-applications
      Environment:
        Variables:
          TABLE_NAME: student-applications
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        External:
          - "@aws-sdk/client-dynamodb"
        EntryPoints:
          - index.ts
  studentUpdateExtracurricularActivities:
    Type: AWS::Serverless::Function
    Properties:
      Description: Allows a student to update their extracurriculars.
      CodeUri: src/lambdaFunctions/updateExtracurricularActivities
      Handler: index.handler
      Runtime: nodejs20.x
      Events:
        PostRequest:
          Type: Api
          Properties:
            RestApiId: !Ref ScholarshipApi
            Path: /students/extracurriculars
            Method: post
            Auth:
              Authorizer: studentAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: student-applications
      Environment:
        Variables:
          TABLE_NAME: student-applications
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        External:
          - "@aws-sdk/client-dynamodb"
        EntryPoints:
          - index.ts
  readAllStudentInfo:
    Type: AWS::Serverless::Function
    Properties:
      Description: Gets all information about the specified student, from the cookie header.
      CodeUri: src/lambdaFunctions/readAllStudentInfo
      Handler: index.handler
      Runtime: nodejs20.x
      Events:
        GetRequest:
          Type: Api
          Properties:
            RestApiId: !Ref ScholarshipApi
            Path: /students/info/all
            Method: get
            Auth:
              Authorizer: studentAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: student-applications
      Environment:
        Variables:
          TABLE_NAME: student-applications
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        External:
          - "@aws-sdk/client-dynamodb"
        EntryPoints:
          - index.ts
  studentLogin:
    Type: AWS::Serverless::Function
    Properties:
      Description: Exchanges a user's authorization code for a token.
      CodeUri: src/lambdaFunctions/studentLogin
      Handler: index.handler
      Runtime: nodejs20.x
      Events:
        PostRequest:
          Type: Api
          Properties:
            RestApiId: !Ref ScholarshipApi
            Path: /students/login
            Method: post
            Auth:
              Authorizer: NONE
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:DescribeUserPoolClient
                - cognito-idp:ListUserPools
              Resource: arn:aws:cognito-idp:us-east-1:582555552507:userpool/us-east-1_Lfjuy5zaM
      Environment:
        Variables:
          COGNITO_AUTH_URL: https://us-east-1lfjuy5zam.auth.us-east-1.amazoncognito.com/oauth2/token
          COGNITO_CLIENT_ID: 4bi5clfnmk0qflgvqd8aetok86
          COGNITO_JWK_URL: https://cognito-idp.us-east-1.amazonaws.com/us-east-1_Lfjuy5zaM/.well-known/jwks.json
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        External:
          - "@aws-sdk/client-cognito-identity-provider"
        EntryPoints:
          - index.ts
  studentUpdateUniversityDetails:
    Type: AWS::Serverless::Function
    Properties:
      Description: Allows a user to set their university details.
      CodeUri: src/lambdaFunctions/updateUniversityDetails
      Handler: index.handler
      Runtime: nodejs20.x
      Events:
        PostRequest:
          Type: Api
          Properties:
            RestApiId: !Ref ScholarshipApi
            Path: /students/uni-details
            Method: post
            Auth:
              Authorizer: studentAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: student-applications
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        External:
          - "@aws-sdk/client-dynamodb"
        EntryPoints:
          - index.ts
  getStudentById:
    Type: AWS::Serverless::Function
    Properties:
      Description: Allows an admin to get all information about a student by their login id.
      CodeUri: src/lambdaFunctions/getStudentById
      Handler: index.handler
      Runtime: nodejs20.x
      Events:
        GetRequest:
          Type: Api
          Properties:
            RestApiId:
              Ref: ScholarshipApi
            Path: /admin/get/student/{studentid+}
            Method: get
            Auth:
              Authorizer: NONE
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        External:
          - "@aws-sdk/client-dynamodb"
        EntryPoints:
          - index.ts

  # Define the DynamoDB tables
  ScholarshipProvidersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: scholarship-providers
      AttributeDefinitions:
        # Define the primary (and secondary) keys.
        # We don't need to define any other attributes, only these.
        - AttributeName: Email
          AttributeType: S
      #        - AttributeName: SampleKey
      #          AttributeType: N
      KeySchema:
        # Tell AWS which one of the keys is what.
        - AttributeName: Email
          KeyType: HASH
      #        - AttributeName: SampleKey
      #          KeyType: SORT
      # ALWAYS use PAY_PER_REQUEST for billing mode.
      BillingMode: PAY_PER_REQUEST
  ScholarshipInfoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: scholarship-info
      AttributeDefinitions:
        - AttributeName: ScholarshipID
          AttributeType: S
      KeySchema:
        - AttributeName: ScholarshipID
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  StudentApplicationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: student-applications
      AttributeDefinitions:
        - AttributeName: Email
          AttributeType: S
      KeySchema:
        - AttributeName: Email
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  #Define the custom authorizer function
  providerAuthorizer:
    Type: AWS::Serverless::Function
    Properties:
      Description: A function to authorize scholarship providers.
      CodeUri: src/lambdaFunctions/providerAuthorizer
      Handler: index.handler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBReadPolicy:
            TableName: scholarship-providers
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:providerjwt-bTmFJk"
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        External:
          - "@aws-sdk/client-secrets-manager"
        EntryPoints:
          - index.ts

  # Define the API Gateway endpoints
  ScholarshipApi:
    Type: AWS::Serverless::Api
    Properties:
      # The name of the stage - this typically would change when you deploy
      # from the dev to production stages.
      StageName: dev
      BinaryMediaTypes:
        - multipart~1form-data
      # Define the authorizers that are available
      Auth:
        # Tell SAM that this is the authorizer to always use, unless overridden.
        DefaultAuthorizer: providerAuthorizer
        Authorizers:
          # Name the authorizer
          providerAuthorizer:
            # Point SAM to the authorizer
            FunctionArn: !GetAtt providerAuthorizer.Arn
            Identity:
              # Tell the authorizer to check for a cookie with this regex pattern.
              Header: Cookie
              ValidationExpression: .*authToken=([^;]+).*
          studentAuthorizer:
            UserPoolArn: arn:aws:cognito-idp:us-east-1:582555552507:userpool/us-east-1_Lfjuy5zaM
            Identity:
              Header: Authorization
      # Set up the CORS settings - these can be overridden, but it's a pain.
      Cors:
        AllowMethods: "'POST, GET, OPTIONS'"
        AllowOrigin: "'*'"
        MaxAge: "'300'"

Outputs:
  scholarshipEligibilityApi:
    Description: API Gateway endpoint URL for the dev stage of the scholarship API
    Value: !Sub https://${ScholarshipApi}.execute-api.${AWS::Region}.amazonaws.com/dev/
